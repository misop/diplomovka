#version 430

layout(triangles, equal_spacing, cw) in;

layout(location = 0) in vec4 i_vertex_eye[];
layout(location = 1) in vec4 i_normal_eye[];
layout(location = 2) in vec4 i_light_eye[];
layout(location = 3) in vec3 i_tangent_eye[];
layout(location = 4) in vec3 i_bitangent_eye[];
layout(location = 5) in vec2 i_uv[];
layout(location = 6) in vec4 i_normal[];

layout(location = 0) uniform mat4 ModelMatrix;
layout(location = 1) uniform mat4 ViewMatrix;
layout(location = 2) uniform mat4 ProjectionMatrix;
layout(location = 4) uniform vec4 Material;
layout(binding=1) uniform sampler2D DisplacementSampler;

layout(location = 0) out vec4 vertex_eye;
layout(location = 1) out vec4 normal_eye;
layout(location = 2) out vec4 light_eye;
layout(location = 3) out vec3 tangent_eye;
layout(location = 4) out vec3 bitangent_eye;
layout(location = 5) out vec2 uv;

void main(void) {
    float u = gl_TessCoord.x, v = gl_TessCoord.y;

    vec3 p0 = gl_TessCoord.x * gl_in[0].gl_Position.xyz;
    vec3 p1 = gl_TessCoord.y * gl_in[1].gl_Position.xyz;
    vec3 p2 = gl_TessCoord.z * gl_in[2].gl_Position.xyz;
	vec4 position = vec4((p0 + p1 + p2), 1.0);
	vertex_eye = gl_TessCoord.x*i_vertex_eye[0] + gl_TessCoord.y*i_vertex_eye[1] + gl_TessCoord.z*i_vertex_eye[2];
	normal_eye = gl_TessCoord.x*i_normal_eye[0] + gl_TessCoord.y*i_normal_eye[1] + gl_TessCoord.z*i_normal_eye[2];
	light_eye = gl_TessCoord.x*i_light_eye[0] + gl_TessCoord.y*i_light_eye[1] + gl_TessCoord.z*i_light_eye[2];
	tangent_eye = gl_TessCoord.x*i_tangent_eye[0] + gl_TessCoord.y*i_tangent_eye[1] + gl_TessCoord.z*i_tangent_eye[2];
	bitangent_eye = gl_TessCoord.x*i_bitangent_eye[0] + gl_TessCoord.y*i_bitangent_eye[1] + gl_TessCoord.z*i_bitangent_eye[2];
	uv = gl_TessCoord.x*i_uv[0] + gl_TessCoord.y*i_uv[1] + gl_TessCoord.z*i_uv[2];
	vec4 normal = normalize(gl_TessCoord.x*i_normal[0] + gl_TessCoord.y*i_normal[1] + gl_TessCoord.z*i_normal[2]);
	
	if (Material.x < 151) {
		float displacement = texture(DisplacementSampler, uv).r - 0.5;
		position += normal * 5 * displacement.r;
	}
	//gl_Position = vec4(position, 1);
	gl_Position = ProjectionMatrix * ViewMatrix * ModelMatrix * position;
}